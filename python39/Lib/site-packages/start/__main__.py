import os
import shutil
import sys
import subprocess

from argparse import ArgumentParser
from platform import system

if __name__ == "__main__":
    parse = ArgumentParser("Start a new project with python vitrual environment")
    parse.add_argument("project_name", help="Name of new project")
    with open (os.path.dirname(__file__) + "/packages.txt", "r") as f:
        packages = f.readlines()
    parse.add_argument("-P", "--package", default=packages, action="extend", nargs="*")
    parse.add_argument("--env", default=".venv", help="Name of virtual")
    parse.add_argument("--upgrade", action="store_true", help="upgrade pip to newest version")
    parse.add_argument("--replace", action="store_true", help="Replace the old environment if it was exist")
    args = parse.parse_args()

    env_dir = os.path.join(args.project_name, args.env)

    build_cmd = [sys.executable, "-m venv", env_dir]
    if system() == "Windows":
        activate_cmd = os.path.abspath(os.path.join(env_dir, "Scripts", "activate[.ps1|.bat]"))
    else:
        activate_cmd = os.path.abspath(os.path.join(env_dir, "bin", "activate"))

    python_path = os.path.abspath(os.path.join(env_dir,"Scripts", "python"))

    install_cmd = [python_path, "-m", "pip", "install", *args.package]
    if args.upgrade:
        install_cmd.extend(["--upgrade", "pip"])

    if os.path.isdir(env_dir):
        print(f"File '{env_dir}' was already exists, ", end="")
        if args.replace:
            print("removing the old environment")
            shutil.rmtree(env_dir)
        else:
            print("use --replace overwrite the old environment")
            print("Or activate the vitrual environment by the following command:")
            exit(f"'{activate_cmd}'")

    try:
        print("Creating virtual environment")
        subprocess.run(" ".join(build_cmd))
        print("Installing packages")
        subprocess.run(" ".join(install_cmd))
        print("Create environment successed, activate the vitrual environment by the following command:")
        print(activate_cmd)
    except Exception as e:
        print("Build failed")
        print(e)
